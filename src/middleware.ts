import { createServerClient } from '@supabase/ssr';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export async function middleware(request: NextRequest) {
  // Dodajemy szczegÃ³Å‚owe logowanie poczÄ…tku middleware z informacjÄ… o Å›cieÅ¼ce
  console.log('ğŸ”¶ Middleware uruchomione dla:', request.nextUrl.pathname);
  console.log('ğŸ”¶ PeÅ‚ny URL:', request.url);
  console.log('ğŸ”¶ Method:', request.method);

  // Przechwytujemy zapytania API, ktÃ³re mogÄ… byÄ‡ zwiÄ…zane z zasobami admin
  if (request.nextUrl.pathname.includes('/api/')) {
    console.log('ğŸ”¶ Zapytanie API - pomijam sprawdzanie sesji');
    return NextResponse.next();
  }

  // Tworzymy odpowiedÅº
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  });

  // Tworzymy klienta Supabase z Å¼Ä…dania
  console.log('ğŸ”¶ Tworzenie klienta Supabase...');
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          const value = request.cookies.get(name)?.value;
          console.log(
            `ğŸ”¶ Odczytano cookie ${name}:`,
            value ? 'wartoÅ›Ä‡ istnieje' : 'brak wartoÅ›ci',
          );
          return value;
        },
        set(name: string, value: string, options) {
          console.log(`ğŸ”¶ Ustawiono cookie ${name} z opcjami:`, options);
          response.cookies.set({
            name,
            value,
            ...options,
          });
        },
        remove(name: string, options) {
          console.log(`ğŸ”¶ UsuniÄ™to cookie ${name}`);
          response.cookies.set({
            name,
            value: '',
            ...options,
          });
        },
      },
    },
  );

  try {
    console.log('ğŸ”¶ Pobieranie sesji uÅ¼ytkownika...');
    const {
      data: { session },
      error: sessionError,
    } = await supabase.auth.getSession();

    if (sessionError) {
      console.error('ğŸ”¶ BÅ‚Ä…d podczas pobierania sesji:', sessionError.message);
      // W przypadku bÅ‚Ä™du sesji, jeÅ›li uÅ¼ytkownik prÃ³buje wejÅ›Ä‡ do panelu admin,
      // przekierowujemy na stronÄ™ logowania
      if (request.nextUrl.pathname.startsWith('/admin')) {
        console.log('ğŸ”¶ Przekierowanie na login z powodu bÅ‚Ä™du sesji');
        // UÅ¼ywamy peÅ‚nej Å›cieÅ¼ki bez parametrÃ³w do przekierowania
        return NextResponse.redirect(new URL('/login', request.url));
      }
      return response;
    }

    console.log(
      'ğŸ”¶ Sesja:',
      session ? `Zalogowany jako ${session.user.email}` : 'Brak sesji',
    );

    // JeÅ›li Å›cieÅ¼ka to /admin lub /admin/* i uÅ¼ytkownik nie jest zalogowany, przekieruj na stronÄ™ logowania
    if (!session && request.nextUrl.pathname.startsWith('/admin')) {
      console.log('ğŸ”¶ Brak sesji, przekierowujÄ™ na stronÄ™ logowania');
      // Przekierowanie na login bez dodawania parametrÃ³w returnUrl
      return NextResponse.redirect(new URL('/login', request.url));
    }

    // JeÅ›li uÅ¼ytkownik jest zalogowany i prÃ³buje wejÅ›Ä‡ do panelu admin,
    // sprawdzamy czy ma rolÄ™ administratora
    if (session && request.nextUrl.pathname.startsWith('/admin')) {
      console.log(
        'ğŸ”¶ Sprawdzanie uprawnieÅ„ administratora dla:',
        session.user.email,
        'na Å›cieÅ¼ce:',
        request.nextUrl.pathname,
      );

      // SprawdÅº, czy uÅ¼ytkownik ma zapisane uprawnienia administratora w cookie
      const adminVerified = request.cookies.get('adminVerified')?.value;
      if (adminVerified === 'true') {
        console.log('ğŸ”¶ UÅ¼ytkownik zweryfikowany jako admin przez cookies');
        console.log(
          'ğŸ”¶ Admin verification passed for path:',
          request.nextUrl.pathname,
        );
        return response;
      }

      // SprawdÅº metadane uÅ¼ytkownika w JWT
      console.log('ğŸ”¶ Sprawdzam metadane uÅ¼ytkownika w JWT...');

      // Wypisz peÅ‚ne metadata dla debugowania
      console.log('ğŸ”¶ User metadata:', session.user.user_metadata);
      console.log('ğŸ”¶ App metadata:', session.user.app_metadata);

      const isAdminInUserMetadata =
        session.user.user_metadata?.role === 'admin';
      const isAdminInAppMetadata = session.user.app_metadata?.role === 'admin';

      if (isAdminInUserMetadata || isAdminInAppMetadata) {
        console.log('ğŸ”¶ UÅ¼ytkownik ma rolÄ™ admin w metadanych JWT');

        // Ustawiamy cookie, Å¼eby nie musieÄ‡ za kaÅ¼dym razem sprawdzaÄ‡
        response.cookies.set({
          name: 'adminVerified',
          value: 'true',
          path: '/', // Upewniamy siÄ™, Å¼e cookie bÄ™dzie dostÄ™pne na wszystkich Å›cieÅ¼kach
          maxAge: 60 * 60 * 24 * 7, // 7 dni
          httpOnly: true, // Tylko dla HTTP
          secure: process.env.NODE_ENV === 'production', // Secure tylko na produkcji
          sameSite: 'lax', // UmoÅ¼liwia przekazywanie cookie przy nawigacji z zewnÄ™trznych stron
        });

        console.log(
          'ğŸ”¶ Admin verification via JWT passed for path:',
          request.nextUrl.pathname,
        );
        return response;
      }

      try {
        // Pobieramy profil uÅ¼ytkownika, aby sprawdziÄ‡ jego rolÄ™
        const { data: profile, error } = await supabase
          .from('profiles')
          .select('role')
          .eq('id', session.user.id)
          .maybeSingle();

        console.log('ğŸ”¶ Profil uÅ¼ytkownika:', profile, 'BÅ‚Ä…d:', error);

        // JeÅ›li wystÄ…piÅ‚ bÅ‚Ä…d podczas pobierania profilu
        if (error) {
          console.error(
            'ğŸ”¶ BÅ‚Ä…d podczas pobierania profilu:',
            error.message,
            error.code,
          );

          // Tworzymy nowy profil dla uÅ¼ytkownika, jeÅ›li wystÄ…piÅ‚ bÅ‚Ä…d "nie znaleziono"
          if (error.code === 'PGRST116') {
            console.log('ğŸ”¶ Tworzenie nowego profilu...');
            const { error: insertError } = await supabase
              .from('profiles')
              .insert({
                id: session.user.id,
                role: 'user', // DomyÅ›lnie uÅ¼ytkownik jest zwykÅ‚ym uÅ¼ytkownikiem
              });

            if (insertError) {
              console.error(
                'ğŸ”¶ BÅ‚Ä…d podczas tworzenia profilu:',
                insertError.message,
              );
            } else {
              console.log('ğŸ”¶ Utworzono nowy profil z rolÄ… "user"');
            }
          }

          // W przypadku bÅ‚Ä™du sprawdzamy jeszcze metadane uÅ¼ytkownika jako ostatniÄ… deskÄ™ ratunku
          if (isAdminInUserMetadata || isAdminInAppMetadata) {
            console.log(
              'ğŸ”¶ Po bÅ‚Ä™dzie bazy danych, weryfikujÄ™ przez metadane JWT',
            );

            // Ustawiamy cookie, Å¼eby nie musieÄ‡ za kaÅ¼dym razem sprawdzaÄ‡
            response.cookies.set({
              name: 'adminVerified',
              value: 'true',
              path: '/', // Upewniamy siÄ™, Å¼e cookie bÄ™dzie dostÄ™pne na wszystkich Å›cieÅ¼kach
              maxAge: 60 * 60 * 24 * 7, // 7 dni
              httpOnly: true,
              secure: process.env.NODE_ENV === 'production',
              sameSite: 'lax',
            });

            console.log(
              'ğŸ”¶ Admin verification via JWT (after DB error) passed for path:',
              request.nextUrl.pathname,
            );
            return response;
          }

          // RozwiÄ…zanie awaryjne - jeÅ›li strona jest dostÄ™pna bez dodatkowych sprawdzeÅ„
          // (np. dashboard), przepuszczamy uÅ¼ytkownika
          if (request.nextUrl.pathname === '/admin') {
            console.log(
              'ğŸ”¶ Awaryjne zezwolenie na dostÄ™p do gÅ‚Ã³wnej strony admina',
            );
            return response;
          }

          // W przypadku bÅ‚Ä™du przekierowujemy na stronÄ™ gÅ‚Ã³wnÄ… admina
          console.log('ğŸ”¶ Przekierowanie na /admin z powodu bÅ‚Ä™du profilu');
          return NextResponse.redirect(new URL('/admin', request.url));
        }

        // JeÅ›li uÅ¼ytkownik nie ma profilu lub nie ma roli administratora
        if (!profile || profile.role !== 'admin') {
          // Jeszcze raz sprawdzamy metadane jako ostatniÄ… szansÄ™
          if (isAdminInUserMetadata || isAdminInAppMetadata) {
            console.log('ğŸ”¶ Brak profilu admin w bazie, ale znaleziono w JWT');

            // Ustawiamy cookie, Å¼eby nie musieÄ‡ za kaÅ¼dym razem sprawdzaÄ‡
            response.cookies.set({
              name: 'adminVerified',
              value: 'true',
              path: '/', // Upewniamy siÄ™, Å¼e cookie bÄ™dzie dostÄ™pne na wszystkich Å›cieÅ¼kach
              maxAge: 60 * 60 * 24 * 7, // 7 dni
              httpOnly: true,
              secure: process.env.NODE_ENV === 'production',
              sameSite: 'lax',
            });

            // PrÃ³ba naprawienia profilu w bazie danych
            try {
              const { error: updateError } = await supabase
                .from('profiles')
                .update({ role: 'admin' })
                .eq('id', session.user.id);

              if (!updateError) {
                console.log('ğŸ”¶ Zaktualizowano profil w bazie na admin');
              } else {
                console.error(
                  'ğŸ”¶ BÅ‚Ä…d podczas aktualizacji profilu:',
                  updateError,
                );
              }
            } catch (e) {
              console.error('ğŸ”¶ BÅ‚Ä…d podczas aktualizacji profilu:', e);
            }

            console.log(
              'ğŸ”¶ Admin verification via JWT (no admin in DB) passed for path:',
              request.nextUrl.pathname,
            );
            return response;
          }

          // JeÅ›li nie znaleziono uprawnieÅ„ administratora, przekierowujemy na stronÄ™ gÅ‚Ã³wnÄ…
          console.log(
            'ğŸ”¶ UÅ¼ytkownik nie jest administratorem, przekierowujÄ™ na stronÄ™ gÅ‚Ã³wnÄ…',
          );
          return NextResponse.redirect(new URL('/', request.url));
        }

        console.log('ğŸ”¶ UÅ¼ytkownik jest administratorem, kontynuujÄ™...');

        // Ustawiamy cookie, Å¼eby nie musieÄ‡ za kaÅ¼dym razem sprawdzaÄ‡
        response.cookies.set({
          name: 'adminVerified',
          value: 'true',
          path: '/', // Upewniamy siÄ™, Å¼e cookie bÄ™dzie dostÄ™pne na wszystkich Å›cieÅ¼kach
          maxAge: 60 * 60 * 24 * 7, // 7 dni
          httpOnly: true,
          secure: process.env.NODE_ENV === 'production',
          sameSite: 'lax',
        });

        // Dodajemy specjalny nagÅ‚Ã³wek do odpowiedzi, informujÄ…cy o roli administratora
        // To moÅ¼e pomÃ³c w debugowaniu problemÃ³w z autoryzacjÄ…
        response.headers.set('X-User-Role', 'admin');

        console.log(
          'ğŸ”¶ Admin verification via DB passed for path:',
          request.nextUrl.pathname,
        );
        return response;
      } catch (err) {
        console.error(
          'ğŸ”¶ Nieoczekiwany bÅ‚Ä…d podczas sprawdzania uprawnieÅ„:',
          err,
        );

        // Awaryjnie sprawdzamy metadane JWT
        if (isAdminInUserMetadata || isAdminInAppMetadata) {
          console.log('ğŸ”¶ Po wyjÄ…tku, weryfikujÄ™ przez metadane JWT');

          response.cookies.set({
            name: 'adminVerified',
            value: 'true',
            path: '/',
            maxAge: 60 * 60 * 24 * 7,
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax',
          });

          console.log(
            'ğŸ”¶ Admin verification via JWT (after exception) passed for path:',
            request.nextUrl.pathname,
          );
          return response;
        }

        return NextResponse.redirect(new URL('/admin', request.url));
      }
    }

    console.log('ğŸ”¶ Middleware zakoÅ„czone pomyÅ›lnie');
    return response;
  } catch (error) {
    console.error('ğŸ”¶ BÅ‚Ä…d w middleware:', error);
    return response;
  }
}

// Konfiguracja, ktÃ³re Å›cieÅ¼ki powinny byÄ‡ obsÅ‚ugiwane przez middleware
export const config = {
  matcher: ['/admin', '/admin/:path*'],
};
